buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.yanoos'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security:3.2.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	implementation 'org.postgresql:postgresql:42.6.0'

	// validation
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	//webClient
	implementation 'org.springframework.boot:spring-boot-starter-webflux:3.2.2'
	
	// ⭐ Spring boot 3.x이상에서 QueryDsl 패키지를 정의하는 방법
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// jjwt 라이브러리 추가
	// jjwt API 모듈 추가
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	// jjwt 구현체 추가
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	// Jackson Processor Support
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	//mapstruct
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	// https://mvnrepository.com/artifact/org.telegram/telegrambots
	implementation 'org.telegram:telegrambots:6.0.1'

	// JAXB dependencies 추가
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
	implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'

	//kafka
	implementation 'org.springframework.kafka:spring-kafka'

	//jackson
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.1'

}

tasks.named('test') {
	useJUnitPlatform()
}

//========================querydsl 추가 시작========================
// === ⭐ QueryDsl 빌드 옵션 (선택) ===
def querydslSrcDir = "/generated/querydsl"
//gradle build 시 QClass 소스도 함께 build 하기 위해서 sourceSets 에 해당 위치를 추가
sourceSets {
	main.java.srcDirs += [ querydslSrcDir ]
}

//내용을 명시해주지 않으면 Q 파일 내 Generated 를 import 할 때 자바 9 에만 있는 import javax.annotation.processing.Generated 로 import
compileJava {
	options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

//위에서 선언한 querydslSrcDir 변수의 src/main/generated 에다가 annotation processors 가 만든 QClass 들을 저장
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

//build clean 시에 생성되었던 QClass 를 모두 삭제
clean {
	delete file(querydslSrcDir)
}

//========================querydsl 추가 종료========================
